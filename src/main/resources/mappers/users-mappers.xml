<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Users">
	<resultMap type="UsersDto" id="resultUsers">
		<id property="uno" column="uno" />
		<result property="cno" column="cno" />
		<result property="cname" column="cname" />
		<result property="dno" column="dno" />
		<result property="uemail" column="uemail" />
		<result property="uname" column="uname" />
		<result property="utell" column="utell" />
		<result property="upwd" column="upwd" />
		<result property="urank" column="urank" />
		<result property="uregdate" column="uregdate" />
		<result property="uresdate" column="uresdate" />
		<result property="ustate" column="ustate" />
		<result property="ufilename" column="ufilename" />
		<result property="ufilepath" column="ufilepath" />
		<result property="uauthority" column="uauthority" />
		<result property="enabled" column="enabled" />
		<result property="failure_cnt" column="failure_cnt"/>
		<!-- <result property="dname" column="dname"/> -->
	</resultMap>
	
	<resultMap type="ProjectMemberDto" id="resultProjectMember">
		<id property="pno" column="pno" />
		<result property="uno" column="uno" />
		<result property="padmin" column="padmin" />
		<result property="uname" column="uname" />
	</resultMap>	
	
	
	<!-- 비즈니스 가입 -->
	<insert id="joinBusiness" flushCache="true">
		<![CDATA[
		INSERT INTO USERS(uno, cno, uemail, uname, upwd, urank, uauthority, enabled) 
		VALUES(UNO_SE.NEXTVAL, CNO_SE.CURRVAL, #{uemail} , #{uname} , #{upwd} , '대표', 'ROLE_ADMIN', 1 )
		]]>
	</insert>
	
	<!-- 이메일 중복체크 -->
	<select id="emailChk" resultType="string">
		<![CDATA[
		select uemail from users
		where uemail = #{uemail}
		]]>
	</select>
	
	<!-- 유저 가입 -->
	<insert id="joinGuest" flushCache="true">
		<![CDATA[
		insert into users(uno, cno, uemail, uname, upwd, enabled)
		values (UNO_SE.NEXTVAL, #{cno}, #{uemail}, #{uname}, #{upwd}, 1)
		]]>
	</insert>
	
	<!-- 비밀번호 찾기 -->
	<select id="pwdChk" resultType="string">
		<![CDATA[
		select uemail from users
		where uemail = #{uemail} and uname = #{uname}
		]]>
	</select>
	<update id="updateTmppwd" flushCache="true">
		<![CDATA[
		update users set upwd=#{upwd} where uemail=#{uemail}
		]]>
	</update>
	
	<!-- 마이페이지 내 정보 업데이트 -->
	<update id="updateUtell" flushCache="true" parameterType="hashMap">
		<![CDATA[
		update users set utell=#{utell} where uno=#{uno}
		]]>
	</update>
	<update id="updateUrank" flushCache="true" parameterType="hashMap">
		<![CDATA[
		update users set urank=#{urank} where uno=#{uno}
		]]>
	</update>
	
	<!-- 프로필 사진 업데이트 -->
	<update id="updateProfile" flushCache="true" parameterType="hashMap">
		<![CDATA[
		update users set ufilename=#{ufilename}, ufilepath=#{ufilepath} where uno=#{uno}
		]]>
	</update>
	<!-- 프로필 사진 없애기 -->
	<update id="deleteProfile" flushCache="true">
		<![CDATA[
		update users set ufilename=null, ufilepath=null where uno=#{uno}
		]]>
	</update>
	
	<!-- ####### 여기부터 시큐리티 ####### -->
	<!-- 유저 정보 가져오기 -->
	<select id="selectUserById" resultType="com.kh.ontact.users.model.dto.CustomUserDetails">
        <![CDATA[
            SELECT
                *
            FROM
                users
            WHERE
                uemail=#{uemail}
        ]]>
    </select>
    <!-- 로그인 실패 횟수 -->
    <update id="updateFailureCount">
        <![CDATA[
            UPDATE
                users
            SET
                FAILURE_CNT = FAILURE_CNT + 1
            WHERE
                uemail = #{ uemail}
        ]]>
    </update>
    <select id="checkFailureCount" resultType="Integer">
        <![CDATA[
            SELECT
                FAILURE_CNT
            FROM
                users
            WHERE
                uemail=#{uemail}
        ]]>
    </select>
    <!-- 비밀번호 10번이상 틀릴시 계정 비활성화 -->
    <update id="updateUnenabled">
		<![CDATA[
			UPDATE
				users
			SET
				ENABLED = 0
			WHERE
				uemail = #{uemail}
		]]>
	</update>
    <!-- 로그인실패횟수 초기화 -->
    <update id="updateFailureCountReset">
	<![CDATA[
			UPDATE
				users
			SET
				FAILURE_CNT = 0
			WHERE
				uemail = #{uemail}
		]]>
	</update>
	
	
	
	
	
	<!-- 혜원 채팅 관련 코드  -->
	
	<!-- 해당 cno의 내 정보 빼고 users list 불러오기 -->
	<select id="ChatUsersList" resultType="arraylist" resultMap="resultUsers" >
 	<![CDATA[
		SELECT * FROM USERS WHERE CNO=#{cno} AND UNO NOT IN (#{uno})
		]]>
	</select>
		
	<select id="ChatUserDetail" resultType="UsersDto" resultMap="resultUsers">
	 	<![CDATA[
		SELECT * FROM USERS WHERE UEMAIL=#{UEMAIL}
		]]>
	</select>
	
	<!-- 혜원 : 프로젝트 관련 코드 -->
	<!--  해당 프로젝트 유저 list 출력-->
	<select id="listProjectMember" resultType="arraylist" resultMap="resultProjectMember">
	 	<![CDATA[
		select u.uname, u.uno, u.uemail, pm.padmin, p.pname 
		from users u
    	inner join project_member pm
    	on pm.uno=u.uno
    	inner join project p
        on p.pno=#{pno}
    	where pm.pno=#{pno}
		]]>
	</select>
	
	<!-- 프로젝트 멤버 초대하기에서 list -->
	<select id="projectInviteList" resultMap="resultUsers">
	 	<![CDATA[
	 	select c.cno, c.cname, u.uno, u.uname, u.ufilepath
	    from company c left outer join users u on c.cno = u.cno
	    where c.cno=#{cno} and
	    (u.uno 
	    NOT IN (
	        select pm.uno
	            from project p
	            left outer join project_member pm on p.pno = pm.pno
	             where p.pno = #{pno}))
		]]>
	</select>

	
	<!-- 혜림 조직도 부서별 직원리스트 조회 -->
	<!-- 미분류 상태 -->
	<select id="listCountFirst" resultType="int">
		select count(uno) from users where dno = null 
	</select>
	<select id="selectOgFirst" resultType="arraylist"
		resultMap="resultUsers">
		select uno, uname, urank, uemail from users where dno = null
	</select>
	<!-- 부서로 분류된 후 -->
	<select id="listCount" resultType="int"> 
		select count(uno) 
		from users u, dept d 
		where u.dno = d.dno and d.dname = #{dname}
	</select>
	
	<select id="selectOgUser"
		resultMap="resultUsers">
		select u.uno, d.dname, u.uname, u.urank, u.uemail 
		from users u, dept d 
		where u.dno = d.dno and d.dname = #{dname}
	</select>
	<!-- <resultMap type="map" id="resultUsersMap">
		<id property="u_uno" column="uno" />
		<result property="d_dname" column="dname" />
		<result property="u_uname" column="uname" />
		<result property="u_urank" column="urank" />
		<result property="u_uemail" column="uemail" />
	</resultMap> -->
	<!-- <select id="deptListCount" resultType="int" resultMap="resultUsersMap">
		select count(d_dname) from dept 
	</select> -->
	
	<update id="updateDept" flushCache="true" statementType="PREPARED">
		update users set dno = #{dno} where uno = #{uno}
	</update>
	

</mapper>