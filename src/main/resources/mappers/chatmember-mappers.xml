<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace는 dao에서 호출할때 사용함. -->
<mapper namespace="ChatMember">
	<!-- id에는 사용할 임의의 이름을 기술, type에는 VO의 DTO명을 적어준다. -->
	<resultMap type="ChatMemberDto" id="resultChatmember">
		<!-- property에는 VO의 필드명, column에는 db table의 컬럼명 -->
		<id property="chatno" column="chatno" />
		<result property="uno" column="uno" />
		<result property="cuno" column="cuno" />
		<result property="creatchat" column="creatchat" />
		<result property="chatstartdate" column="chatstartdate" />
		<result property="chatenddate" column="chatenddate" />
	</resultMap>
	
	<resultMap type="ChatDto" id="resultChat">
		<!-- property에는 VO의 필드명, column에는 db table의 컬럼명 -->
		<id property="chatno" column="chatno"/>
		<result property="pno" column="pno" />
		<result property="chatname" column="chatname" />
	</resultMap>
	
	<resultMap type="map" id="resultChatList">
		<!-- property에는 VO의 필드명, column에는 db table의 컬럼명 -->
		<id property="chatno" column="chatno"/>
		<result property="chatname" column="chatname" />
		<result property="mcount" column="mcount" />
		<result property="chatcount" column="chatcount" />
		<result property="content" column="content" />
	</resultMap>
	


	<!--해당 채팅방에 멤버 insert -->
	<insert id="insertChatMember" parameterType="ChatMemberDto">
	 <![CDATA[
		insert into
		chatmember(chatno,uno,creatchat,chatstartdate) values
		(#{chatno},#{uno},#{creatchat},sysdate)
		]]>
	</insert>
	
	<!-- 내 uno가 포함된 채팅list -->
	<select id="mychatlist" parameterType="string" resultType="map" resultMap="resultChatList">
	 <![CDATA[
			select c.chatname as chatname,c.chatno as chatno
			,count(m.uno) as mcount, a.CHATCOUNT as chatcount, t.content as content
			from chat c
			inner join chatmember m 
			    on c.chatno in (select chatno from chatmember where uno=#{uno})
			inner join chatalert a	
			    on c.chatno = a.chatno
			inner join chatcontent t
			    on t.chatno=c.chatno
			where a.uno=#{uno} and t.ccno in (select max(ccno) from chatcontent where chatno=c.chatno)
			group by c.chatname, c.chatno, m.chatno, a.chatcount, t.content,t.chatdate
			having m.chatno=c.chatno
			order by chatcount desc, t.chatdate desc
		]]>
	</select>
	
	<!-- 내 uno가 포함되고 검색단어가 포함된 채팅list -->
	<select id="searchchatlist" parameterType="hashMap" resultType="arraylist" resultMap="resultChat">
	 <![CDATA[
		select chatname,chatno from chat 
		where chatno in (select chatno from chatmember where uno=#{uno}) 
		and chatname like '%' || #{searchword} || '%'
		]]>
	</select>
	
	<!-- 채팅방에 포함된 uno 출력 -->
	<select id="chatUnoList" resultType="java.lang.String" parameterType="ChatMemberDto">
		<![CDATA[
		select uno from chatmember where chatno=#{chatno} and uno not in (#{uno}) group by uno
		]]>
	</select>
	
	<!-- 나랑 상대 uno가 들어있는 chatno 찾기 -->
	<select id="SearchChatno" resultType="string">
		<![CDATA[
		select distinct cm.chatno as chatno from chatmember cm
		inner join chatmember cm2
		on cm.chatno=cm2.chatno
		where cm.uno=#{uno} and cm2.uno=#{cuno}
		group by cm.chatno,cm2.chatno
		]]>
	</select>
	
	<!-- 해당 채팅방 멤버수 구하기 -->
	<select id="chatmemCount" resultType="int">
		<![CDATA[
		select count(*) from chatmember 
		where chatno in (select chatno from chatmember where chatno=#{chatno})
		]]>
	</select>
	
	<!-- 해당 채팅방 참여자 이름 구하기 -->
	<select id="chatmemName" resultType="string">
		<![CDATA[
			select u.uname from chatmember cm
			 inner join users u
			 on u.uno = cm.uno
			 where cm.chatno=#{chatno}
		]]>
	</select>
	

</mapper>