<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="CommuteMapper">
	<resultMap type="CommuteDto" id="resultCommute">
		<!-- property에는 vo의 필드명, column에는 db tabel의 컬럼명 두개를 map으로 연결한다 -->
		<result property="uno" column="uno" />
		<result property="dname" column="dname" />
		<result property="uname" column="uname" />
		<result property="cdate" column="cdate" />
		<result property="cstate" column="cstate" />
		<result property="cstarttime" column="cstarttime" />
		<result property="cendtime" column="cendtime" />
		<result property="cworktime" column="cworktime" />
		<result property="creson" column="creson" />
		<!-- <result property="board_subtitle" column="board_subtitle"/> -->
	</resultMap>
	
	<!-- 출퇴근 시간 기간별 조회 -->
	<select id="allListCount" resultType="int" >
		select count(cstate) from commute where uno= #{uno}
	</select>
	<select id="selectDailyCommute" 
		resultType="arraylist"
		resultMap="resultCommute">
		select * from commute where uno = #{uno}
	</select>
	
	<!-- 출퇴근 시간 기간별 조회 : 정상, 지각, 기타 -->
	<select id="listCount" resultType="int" parameterType ="java.util.HashMap">
		select count(cstate) from commute 
		where cstate = '${cstate}' 
		and cdate between to_date('${startdate}', 'yyyy-mm-dd') and to_date('${enddate}', 'yyyy-mm-dd')
		and uno ='${uno}'
	</select>
	<select id="searchDailyCommute" 
		parameterType ="java.util.HashMap"
		resultType="arraylist"
		resultMap="resultCommute">
		select * from commute 
		where cstate = #{cstate}
		and cdate between to_date(#{startdate}, 'yyyy-mm-dd') and to_date(#{enddate}, 'yyyy-mm-dd')
		and uno = #{uno}

	</select>
	
	<!-- 출근 시간 삽입 -->
	<insert id="insertEnter" flushCache="true" statementType="PREPARED">  
	insert into commute values(#{uno}, sysdate, 0, to_char(to_date( #{cstarttime}, 'yyyy-mm-dd hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss'), 
			null, null, #{creason})
	</insert>
	
	<!-- 퇴근 시간 삽입 -->
	<update id="updateLeave" flushCache="true" statementType="PREPARED">
		update commute 
		set cendtime = to_char(to_date( '${cendtime}', 'yyyy-mm-dd hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss'), 
			cworktime = TRUNC((to_date('${cendtime}','yyyy-mm-dd hh24:mi:ss')-to_date(cstarttime,'yyyy-mm-dd hh24:mi:ss'))*24-1) || '.' ||
						TRUNC(mod((to_date('${cendtime}','yyyy-mm-dd hh24:mi:ss') - to_date(cstarttime, 'yyyy-mm-dd hh24:mi:ss'))*24,1)*60)
		where uno = '${uno}' and to_date(cdate, 'yyyy-mm-dd hh24:mi:ss') = to_date(sysdate, 'yyyy-mm-dd')
	</update>
	
	<!-- 월 근무내역 조회 -->
	<!-- 기본값 -->
	<select id="mAllCount" resultType="int">
		select count(c.cdate) from commute c, overwork o
			where c.uno = o.uno and c.cdate = o.owdate and c.uno= #{uno} 
	</select>
	<select id="selectMonthCommute" 
		resultType="arraylist"
		resultMap="monthlyMapper">
		select to_char(c.cdate, 'yyyy-mm-dd') as cdate, c.cworktime as cworktime, o.owtime as owtime, (c.cworktime + o.owtime) as total
			from commute c, overwork o
			where c.uno = o.uno and c.cdate = o.owdate and c.uno= #{uno}
			order by cdate desc
	</select>
	<!-- 월 근무 내역 검색 -->
	<select id="msearchCount" resultType="int">
		select count(*) from commute c, overwork o
			where c.uno = o.uno and c.cdate = o.owdate and c.uno = #{uno}
			and c.cdate between to_date(#{startdate}, 'yyyy-mm-dd') and to_date(#{enddate}, 'yyyy-mm-dd')
		<!-- 	where c.uname = o.uname and c.cdate = o.owdate and c.uname= #{uno} 
			and c.cdate between to_date(#{startdate}, 'yyyy-mm-dd') and to_date(#{enddate}, 'yyyy-mm-dd'); -->
	</select>
	<select id="searchMonthCommute" 
		parameterType ="java.util.HashMap"
		resultType="arraylist"
		resultMap="monthlyMapper">
		select c.cdate as cdate, c.cworktime as cworktime, o.owtime as owtime, (c.cworktime + o.owtime) as total
			from commute c, overwork o
			where c.uno = o.uno and c.cdate = o.owdate and c.uno= #{uno}
			and c.cdate between to_date(#{startdate}, 'yyyy-mm-dd') and to_date(#{enddate}, 'yyyy-mm-dd')
	</select>

	<select id="testCommute" 
		resultType="arraylist"
		resultMap="monthlyMapper">
		select to_char(c.cdate, 'yy/mm/dd') as cdate, (c.cworktime + o.owtime) as total
			from commute c, overwork o
			where c.uno = o.uno and c.cdate = o.owdate and c.uno= #{uno}
	</select>

	<resultMap type="map" id="monthlyMapper">
		<id property="uno" column="uno" />
		<result property="cdate" column="cdate" />
		<result property="cworktime" column="cworktime" />
		<result property="owtime" column="owtime" />
		<result property="total" column="total" />
	</resultMap>
</mapper>
